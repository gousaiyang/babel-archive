name: Build

on: [push, pull_request]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install .[lint,test]
    - name: Run linters
      run: python ci/run_linters.py
      env:
        COLORLABELS_TTY: 1

  test:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental }}
    env:
      PYTEST_ADDOPTS: --color=yes
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
          - 'pypy-3.7'
          - 'pypy-3.8'
          - 'pypy-3.9'
        experimental: [false]
        include:
          - os: ubuntu-18.04
            python-version: '3.4'
            experimental: false
          - os: ubuntu-20.04
            python-version: '3.5'
            experimental: false
          - os: ubuntu-20.04
            python-version: '3.6'
            experimental: false
          - os: ubuntu-20.04
            python-version: 'pypy-3.6'
            experimental: false
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install .[test]
    - name: First round test (local code, with coverage)
      run: |
        python ci/path_checker.py
        coverage run -m pytest
    - name: Run doctest if on latest Python
      if: ${{ matrix.python-version == '3.11' }}
      run: pytest --doctest-only bpc_utils tests
    - name: Second round test (installed package, without coverage)
      run: |
        mv bpc_utils bpc_utils~
        python ci/path_checker.py strict
        pytest
        mv bpc_utils~ bpc_utils
    - name: Upload coverage report
      if: ${{ matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11' }}
      run: |
        pip install codecov
        codecov

  publish:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install --upgrade build
    - name: Build a binary wheel and a source tarball
      run: python -m build --sdist --wheel --outdir dist/ .
    - name: Publish distribution to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip-existing: true
    - name: Publish package to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        skip-existing: true
    - name: Changelog
      uses: Bullrich/generate-release-changelog@master
      id: changelog
      env:
        REPO: ${{ github.repository }}
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1.12.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        # allowUpdates: true
        artifacts: |
          dist/*
        body: |
          ${{ steps.changelog.outputs.changelog }}
        name: PyBPC Utilities ${{ github.ref_name }}
        tag: "${{ github.ref_name}}"
        token: "${{ secrets.GITHUB_TOKEN }}"
